<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on RAMBLE&amp;BB</title><link>https://blog.black-desk.cn/post/</link><description>Recent content in Posts on RAMBLE&amp;BB</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 10 Jul 2022 02:23:58 +0800</lastBuildDate><atom:link href="https://blog.black-desk.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>lambda</title><link>https://blog.black-desk.cn/post/lambda/</link><pubDate>Sun, 10 Jul 2022 02:23:58 +0800</pubDate><guid>https://blog.black-desk.cn/post/lambda/</guid><description>这里整理一些关于c++中的匿名函数的知识.
《C++ primer》上有的内容就不在重述了.这里重点讲一些primer上可能没有的东西.
捕获的时机 primer 向我们介绍到: 有两种捕获变量的方式, 值捕获和引用捕获. 其中:
...
与参数不同,被捕获的变量的值是在lambda创建时拷贝,而不是调用时拷贝
...
如果我们采用引用方式捕获一个变量,就必须确保被引用的对象在lambda执行的时候是存在的.lambda捕获的都是局部变量,这些变量在函数结束后就不复存在了.
...
我们看一段代码:
auto funtionTimesMod1(int mod) { int variableA = mod; auto f = [variableA](int a, int b) { return a % variableA * b % variableA; }; return f; } void test1() { cout &amp;lt;&amp;lt; &amp;quot;---test1---&amp;quot; &amp;lt;&amp;lt; endl; int a = 10, b = 20, c = 7; auto times = funtionTimesMod1(c); cout &amp;lt;&amp;lt; times(a, b) &amp;lt;&amp;lt; endl; } 这里funtionTimesMod1(int mod)返回一个签名为int(int, int)的函数,这个函数计算两个参数相乘对mod取模的结果.</description><content:encoded><![CDATA[<p>这里整理一些关于<code>c++</code>中的匿名函数的知识.</p>
<p>《C++
primer》上有的内容就不在重述了.这里重点讲一些primer上<strong>可能</strong>没有的东西.</p>
<h2 id="捕获的时机">捕获的时机</h2>
<p>primer 向我们介绍到: 有两种捕获变量的方式, 值捕获和引用捕获.
其中:</p>
<blockquote>
<p>...</p>
<p>与参数不同,被捕获的变量的值是在lambda创建时拷贝,而不是调用时拷贝</p>
<p>...</p>
<p>如果我们采用引用方式捕获一个变量,就必须确保被引用的对象在lambda执行的时候是存在的.lambda捕获的都是局部变量,这些变量在函数结束后就不复存在了.</p>
<p>...</p>
</blockquote>
<p>我们看一段代码:</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod1<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> variableA <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> a <span class="op">%</span> variableA <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">;</span> <span class="op">};</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test1<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test1---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod1<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>这里<code>funtionTimesMod1(int mod)</code>返回一个签名为<code>int(int, int)</code>的函数,这个函数计算两个参数相乘对<code>mod</code>取模的结果.</p>
<p>当然可以正常运行,结果为<code>4</code>,如果我们将它换成引用捕获:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod2<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> variableA <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[&amp;</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> a <span class="op">%</span> variableA <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">;</span> <span class="op">};</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test2<span class="op">()</span> <span class="op">{</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test2---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod2<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>这段代码就已经不能正常工作了,它的输出是 <code>0</code>.</p>
<p>我们来看看为啥:</p>
<pre><code>Process 15820 stopped
* thread #1, name = &#39;tmp&#39;, stop reason = step in
    frame #0: 0x000000000040096b tmp`funtionTimesMod2(mod=7) at tmp.cpp:17
   14   }
   15
   16   auto funtionTimesMod2(int mod) {
-&gt; 17     int variableA = mod;
   18     auto f = [&amp;variableA](int a, int b) { return a % variableA * b % variableA; };
   19     return f;
   20   }
(lldb) p &amp;variableA
(int *) $1 = 0x00007fffffffe120

Process 15820 stopped
* thread #1, name = &#39;tmp&#39;, stop reason = step over
    frame #0: 0x00000000004009dc tmp`test2() at tmp.cpp:25
   22     cout &lt;&lt; &quot;---test2---&quot; &lt;&lt; endl;
   23     int a = 10, b = 20, c = 7;
   24     auto times = funtionTimesMod2(c);
-&gt; 25     cout &lt;&lt; times(a, b) &lt;&lt; endl;
   26   }
   27   auto funtionTimesMod3(int mod) {
   28     int variableA = mod;
(lldb) p times
((anonymous class)) $2 = {
  variableA = 0x00007fffffffe120
}</code></pre>
<p>可以看到<code>times</code>这个对象中保存下来的<code>variableA</code>只是一个指针,它指向我们之前创建的局部变量<code>variableA</code>,这个地址在栈上,这意味着当我们真的调用<code>times</code>的时候,局部变量<code>variableA</code>所在的那片内存已经被使用过了.所以会返回错误的结果.接下来,我们可以看到实际上调用的时候<code>variableA</code>里面是<code>20</code>,这是因为刚好参数<code>b</code>被放置在了<code>variableA</code>之前的位置上.</p>
<pre><code>Process 21271 stopped
* thread #1, name = &#39;tmp&#39;, stop reason = step in
    frame #0: 0x0000000000400a32 tmp`funtionTimesMod2(this=0x00007fffffffe158, a=10, b=20)::$_1::operator()(int, int) const at tmp.cpp:18
   15
   16   auto funtionTimesMod2(int mod) {
   17     int variableA = mod;
-&gt; 18     auto f = [&amp;variableA](int a, int b) { return a % variableA * b % variableA; };
   19     return f;
   20   }
   21   void test2() {
(lldb) p variableA
(int) $3 = 20
(lldb) p &amp;b
(int *) $4 = 0x00007fffffffe120</code></pre>
<h2 id="lambda-的实现">lambda 的实现</h2>
<p>根据《C++
Primer》在10.3以及14.8.1的介绍,我们知道一个lambda表达式是由编译器负责翻译成一个<strong>没有类名,重载过调用运算符</strong>的对象的.</p>
<p>这解释了为什么我们只能用<code>auto</code>来定义一个lambda类型的变量,因为这个类是没有名字的,
或者说它的名字是编译器自己生成的,我们并不能知道它叫什么.</p>
<p>这听起来很美好,我们也确实可以写出代码,用一个自己创建的,重载过调用运算符的对象,来模拟一个lambda:</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> INT <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span><span class="op">:</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> num<span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  INT<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>i<span class="op">)</span> <span class="op">:</span> num<span class="op">(</span>i<span class="op">.</span>num<span class="op">)</span> <span class="op">{</span> cout <span class="op">&lt;&lt;</span> <span class="st">&quot;Copy constructor&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="op">}</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  INT<span class="op">()</span> <span class="op">=</span> <span class="cf">default</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod3<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test3<span class="op">()</span> <span class="op">{</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test3---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod3<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod4<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>  <span class="kw">class</span> function <span class="op">{</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> INT variableA<span class="op">;</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>    function<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>variableA<span class="op">)</span> <span class="op">:</span> variableA<span class="op">(</span>variableA<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="kw">operator</span><span class="op">()(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>      cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> f<span class="op">(</span>variableA<span class="op">);</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test4<span class="op">()</span> <span class="op">{</span></span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test4---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod4<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>为了观察发生的值拷贝的时机,以确定我们自己写的这个类的行为和lambda真的完全一致,我们可以自定义一个class,并且让他发生拷贝构造的时候打印一些信息.</p>
<p>运行结果如下:</p>
<pre><code>---test3---
----E
----A
----B
Copy constructor
----D
----F
----C
4
----G
---test4---
----E
----A
----B
Copy constructor
----D
----F
----C
4
----G</code></pre>
<p>这又一次说明了说明捕获引起的值拷贝发生在lambda被初始化的时候.</p>
<p>看起来这两个东西的行为几乎一致, 但是真的是这样吗?</p>
<h2 id="编译器的优化">编译器的优化</h2>
<p>编译器会对我们写的代码做出一些优化,以减少复制对象的次数.如果不了解这点可以看看<a
href="https://www.cnblogs.com/kekec/p/11303391.html">这篇</a>博客.</p>
<p>如果我们关闭返回值优化,那么运行的结果是这样的:</p>
<pre><code>---test3---
----E
----A
----B
Copy constructor
Copy constructor
----D
Copy constructor
Copy constructor
----F
----C
4
----G
---test4---
----E
----A
----B
Copy constructor
----D
Copy constructor
Copy constructor
----F
----C
4
----G</code></pre>
<p>可以看到我们自己写的类,少了一次拷贝构造.</p>
<p>我们先来解释一下lambda为什么会发生这么多次拷贝构造.</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod3<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span> <span class="co">// 5</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 6 </span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span> <span class="co">// 7</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 8</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span> </span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 14</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span> <span class="co">//15</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span> <span class="co">// 9</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 10</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span> <span class="co">// 11</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test3<span class="op">()</span> <span class="op">{</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test3---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 1</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span> <span class="co">// 2</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 3</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod3<span class="op">(</span>c<span class="op">);</span> <span class="co">// 4</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 12</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">// 13</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="co">//16</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>首先我们的程序是按照如上的顺序运行的.</p>
<p>可以看到前两个拷贝构造发生在9,而第3、4次发生在11.</p>
<p>如果完全按照语义来看的话,9这句话可以有两种理解方式:</p>
<ol type="1">
<li>创建一个lambda对象,对象名字叫f,这个对象的内容就是后面那个lambda表达式.</li>
<li>创建一个lambda表达式,然后将其作为参数,调用同类型对象f的拷贝构造函数.</li>
</ol>
<p>如果按照第一种方法来理解,那么第9行发生两次拷贝构造就不是很能理解了.</p>
<p>所以应该是第二种.</p>
<p>在10之后也发生了两次拷贝调用.应该是先建立了一个变量用来做返回值,比如说叫r,然后将f赋值给返回值变量r,然后返回值变量r在被赋值给test3()中的times,这样发生的两次拷贝构造.</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod4<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">class</span> function <span class="op">{</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> INT variableA<span class="op">;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    function<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>variableA<span class="op">)</span> <span class="op">:</span> variableA<span class="op">(</span>variableA<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="kw">operator</span><span class="op">()(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>      cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> f<span class="op">(</span>variableA<span class="op">);</span> <span class="co">// &lt;- 这里</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test4<span class="op">()</span> <span class="op">{</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test4---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod4<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>之前自己模拟lambda的这个代码,我们在注释标注的那个位置的实现和lambda中,"先建一个右值,然后拷贝构造出f"的行为不太一样.导致这里少了一次拷贝构造.所以实际上应该是这样:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod5<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">class</span> function <span class="op">{</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> INT variableA<span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    function<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>variableA<span class="op">)</span> <span class="op">:</span> variableA<span class="op">(</span>variableA<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="kw">operator</span><span class="op">()(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>      cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>  function f <span class="op">=</span> function<span class="op">(</span>variableA<span class="op">);</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test5<span class="op">()</span> <span class="op">{</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test5---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod5<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>实际上没必要纠结那么多,正常编译的话,其实是不会去先建一个右值的对象的.</p>
<h2 id="代码">代码</h2>
<div class="sourceCode" id="cb11"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;bits/stdc++.h&gt;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod1<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> variableA <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> a <span class="op">%</span> variableA <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">;</span> <span class="op">};</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test1<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test1---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod1<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod2<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> variableA <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[&amp;</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> a <span class="op">%</span> variableA <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">;</span> <span class="op">};</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test2<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test2---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod2<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> INT <span class="op">{</span></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span><span class="op">:</span></span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> num<span class="op">;</span></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a>  INT<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>i<span class="op">)</span> <span class="op">:</span> num<span class="op">(</span>i<span class="op">.</span>num<span class="op">)</span> <span class="op">{</span> cout <span class="op">&lt;&lt;</span> <span class="st">&quot;Copy constructor&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span> <span class="op">}</span></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a>  INT<span class="op">()</span> <span class="op">=</span> <span class="cf">default</span><span class="op">;</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb11-34"><a href="#cb11-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-35"><a href="#cb11-35" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod3<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-36"><a href="#cb11-36" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb11-37"><a href="#cb11-37" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-38"><a href="#cb11-38" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb11-39"><a href="#cb11-39" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-40"><a href="#cb11-40" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> f <span class="op">=</span> <span class="op">[</span>variableA<span class="op">](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-41"><a href="#cb11-41" aria-hidden="true" tabindex="-1"></a>    cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-42"><a href="#cb11-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb11-43"><a href="#cb11-43" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-44"><a href="#cb11-44" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-45"><a href="#cb11-45" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb11-46"><a href="#cb11-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-47"><a href="#cb11-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-48"><a href="#cb11-48" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test3<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-49"><a href="#cb11-49" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test3---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-50"><a href="#cb11-50" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb11-51"><a href="#cb11-51" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-52"><a href="#cb11-52" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod3<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb11-53"><a href="#cb11-53" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-54"><a href="#cb11-54" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-55"><a href="#cb11-55" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-56"><a href="#cb11-56" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-57"><a href="#cb11-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-58"><a href="#cb11-58" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod4<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-59"><a href="#cb11-59" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb11-60"><a href="#cb11-60" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-61"><a href="#cb11-61" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb11-62"><a href="#cb11-62" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-63"><a href="#cb11-63" aria-hidden="true" tabindex="-1"></a>  <span class="kw">class</span> function <span class="op">{</span></span>
<span id="cb11-64"><a href="#cb11-64" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> INT variableA<span class="op">;</span></span>
<span id="cb11-65"><a href="#cb11-65" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-66"><a href="#cb11-66" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb11-67"><a href="#cb11-67" aria-hidden="true" tabindex="-1"></a>    function<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>variableA<span class="op">)</span> <span class="op">:</span> variableA<span class="op">(</span>variableA<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb11-68"><a href="#cb11-68" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="kw">operator</span><span class="op">()(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-69"><a href="#cb11-69" aria-hidden="true" tabindex="-1"></a>      cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-70"><a href="#cb11-70" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb11-71"><a href="#cb11-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-72"><a href="#cb11-72" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> f<span class="op">(</span>variableA<span class="op">);</span></span>
<span id="cb11-73"><a href="#cb11-73" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-74"><a href="#cb11-74" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb11-75"><a href="#cb11-75" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-76"><a href="#cb11-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-77"><a href="#cb11-77" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test4<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-78"><a href="#cb11-78" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test4---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-79"><a href="#cb11-79" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb11-80"><a href="#cb11-80" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-81"><a href="#cb11-81" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod4<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb11-82"><a href="#cb11-82" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-83"><a href="#cb11-83" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-84"><a href="#cb11-84" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-85"><a href="#cb11-85" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-86"><a href="#cb11-86" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-87"><a href="#cb11-87" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> funtionTimesMod5<span class="op">(</span><span class="dt">int</span> mod<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-88"><a href="#cb11-88" aria-hidden="true" tabindex="-1"></a>  INT variableA<span class="op">;</span></span>
<span id="cb11-89"><a href="#cb11-89" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----A&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-90"><a href="#cb11-90" aria-hidden="true" tabindex="-1"></a>  variableA<span class="op">.</span>num <span class="op">=</span> mod<span class="op">;</span></span>
<span id="cb11-91"><a href="#cb11-91" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----B&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-92"><a href="#cb11-92" aria-hidden="true" tabindex="-1"></a>  <span class="kw">class</span> function <span class="op">{</span></span>
<span id="cb11-93"><a href="#cb11-93" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> INT variableA<span class="op">;</span></span>
<span id="cb11-94"><a href="#cb11-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-95"><a href="#cb11-95" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb11-96"><a href="#cb11-96" aria-hidden="true" tabindex="-1"></a>    function<span class="op">(</span><span class="at">const</span> INT <span class="op">&amp;</span>variableA<span class="op">)</span> <span class="op">:</span> variableA<span class="op">(</span>variableA<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb11-97"><a href="#cb11-97" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="kw">operator</span><span class="op">()(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-98"><a href="#cb11-98" aria-hidden="true" tabindex="-1"></a>      cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----C&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-99"><a href="#cb11-99" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> a <span class="op">%</span> variableA<span class="op">.</span>num <span class="op">*</span> b <span class="op">%</span> variableA<span class="op">.</span>num<span class="op">;</span></span>
<span id="cb11-100"><a href="#cb11-100" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-101"><a href="#cb11-101" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-102"><a href="#cb11-102" aria-hidden="true" tabindex="-1"></a>  function f <span class="op">=</span> function<span class="op">(</span>variableA<span class="op">);</span></span>
<span id="cb11-103"><a href="#cb11-103" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----D&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-104"><a href="#cb11-104" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> f<span class="op">;</span></span>
<span id="cb11-105"><a href="#cb11-105" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-106"><a href="#cb11-106" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-107"><a href="#cb11-107" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> test5<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-108"><a href="#cb11-108" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;---test5---&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-109"><a href="#cb11-109" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> b <span class="op">=</span> <span class="dv">20</span><span class="op">,</span> c <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></span>
<span id="cb11-110"><a href="#cb11-110" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----E&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-111"><a href="#cb11-111" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> times <span class="op">=</span> funtionTimesMod5<span class="op">(</span>c<span class="op">);</span></span>
<span id="cb11-112"><a href="#cb11-112" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----F&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-113"><a href="#cb11-113" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> times<span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-114"><a href="#cb11-114" aria-hidden="true" tabindex="-1"></a>  cout <span class="op">&lt;&lt;</span> <span class="st">&quot;----G&quot;</span> <span class="op">&lt;&lt;</span> endl<span class="op">;</span></span>
<span id="cb11-115"><a href="#cb11-115" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-116"><a href="#cb11-116" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-117"><a href="#cb11-117" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-118"><a href="#cb11-118" aria-hidden="true" tabindex="-1"></a>  test1<span class="op">();</span></span>
<span id="cb11-119"><a href="#cb11-119" aria-hidden="true" tabindex="-1"></a>  test2<span class="op">();</span></span>
<span id="cb11-120"><a href="#cb11-120" aria-hidden="true" tabindex="-1"></a>  test3<span class="op">();</span></span>
<span id="cb11-121"><a href="#cb11-121" aria-hidden="true" tabindex="-1"></a>  test4<span class="op">();</span></span>
<span id="cb11-122"><a href="#cb11-122" aria-hidden="true" tabindex="-1"></a>  test5<span class="op">();</span></span>
<span id="cb11-123"><a href="#cb11-123" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
]]></content:encoded></item><item><title>Shadowsocks (一) 主循环</title><link>https://blog.black-desk.cn/post/shadowsocks1/</link><pubDate>Sun, 10 Jul 2022 02:23:58 +0800</pubDate><guid>https://blog.black-desk.cn/post/shadowsocks1/</guid><description>这里简单分析一下Shadowsocks这个软件的源码.
因为网上一直有声音认为其源码质量不错.刚好最近在学一些服务器编程相关的知识,所以就来简单分析一下它.
同时由于希望能获得一些阅读源码的经验. 这里会简单记录我读源码的心路历程.
目录结构 首先我们来tree一下,惯例,测试相关的文件就省略了
❯ tree . ├── CHANGES ├── CONTRIBUTING.md ├── Dockerfile ├── LICENSE ├── MANIFEST.in ├── README.md ├── README.rst ├── config.json.example ├── debian │ ├── changelog │ ├── compat │ ├── config.json │ ├── control │ ├── copyright │ ├── docs │ ├── init.d │ ├── install │ ├── rules │ ├── shadowsocks.default │ ├── shadowsocks.manpages │ ├── source │ │ └── format │ ├── sslocal.1 │ └── ssserver.</description><content:encoded><![CDATA[<p>这里简单分析一下Shadowsocks这个软件的源码.</p>
<p>因为网上一直有声音认为其源码质量不错.刚好最近在学一些服务器编程相关的知识,所以就来简单分析一下它.</p>
<p>同时由于希望能获得一些阅读源码的经验.
这里会简单记录我读源码的心路历程.</p>
<h2 id="目录结构">目录结构</h2>
<p>首先我们来tree一下,惯例,测试相关的文件就省略了</p>
<pre><code>❯ tree
.
├── CHANGES
├── CONTRIBUTING.md
├── Dockerfile
├── LICENSE
├── MANIFEST.in
├── README.md
├── README.rst
├── config.json.example
├── debian
│   ├── changelog
│   ├── compat
│   ├── config.json
│   ├── control
│   ├── copyright
│   ├── docs
│   ├── init.d
│   ├── install
│   ├── rules
│   ├── shadowsocks.default
│   ├── shadowsocks.manpages
│   ├── source
│   │   └── format
│   ├── sslocal.1
│   └── ssserver.1
├── setup.py
├── shadowsocks
│   ├── __init__.py
│   ├── asyncdns.py
│   ├── common.py
│   ├── crypto
│   │   ├── __init__.py
│   │   ├── aead.py
│   │   ├── hkdf.py
│   │   ├── mbedtls.py
│   │   ├── openssl.py
│   │   ├── rc4_md5.py
│   │   ├── sodium.py
│   │   ├── table.py
│   │   └── util.py
│   ├── cryptor.py
│   ├── daemon.py
│   ├── eventloop.py
│   ├── local.py
│   ├── lru_cache.py
│   ├── manager.py
│   ├── server.py
│   ├── shell.py
│   ├── tcprelay.py
│   ├── tunnel.py
│   └── udprelay.py
├── snapcraft.yaml
├── tests
│   └── ... 
└── utils
    ├── README.md
    ├── autoban.py
    └── fail2ban
        └── shadowsocks.conf

11 directories, 106 files</code></pre>
<p>可以看到,主要的源码应该都在shadowsocks目录下,我们可以看到用于加/解密的程序,可以看到处理TCP,UDP连接的程序.</p>
<p>也可以看到根目录下有DockerFile,以及一个不知道用来干啥的debain文件夹,我猜测是用来生成软件包的.</p>
<p>setup.py看起来像是用于安装成Python包的.</p>
<p>现在对于目录结构有一定认识和猜测了之后,我们可以开始下一步行动了.</p>
<h2 id="入口">入口</h2>
<p>阅读源码肯定要先找入口,至少要知道<code>main</code>在哪里,</p>
<p>由于实际上使用过这个软件,我知道我们在本地启动的时候输入的命令是<code>sslocal</code>,而在服务器运行的时候输入的命令是<code>ssserver</code>.</p>
<p>这意味着我们首先得知道这两个命令是如何启动代码的,输入这两个命令之后实际上运行了什么函数.</p>
<p>在<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/setup.py#L21"><code>setup.py</code></a>中我们可以看到:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>entry_points<span class="op">=</span><span class="st">&quot;&quot;&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="st">[console_scripts]</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="st">sslocal = shadowsocks.local:main</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">ssserver = shadowsocks.server:main</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;&quot;&quot;</span>,</span></code></pre></div>
<p>应该不难看出,上面的代码意味着:<code>sslocal</code>对应的是<code>shadowsocks</code>包下的<code>local.py</code>里面的<code>main()</code>,而<code>ssserver</code>对应的是<code>shadowsocks</code>包下的<code>server.py</code>里面的<code>main()</code>.</p>
<p>那么我们先看客户端,也就是<code>sslocal</code>.</p>
<h2 id="客户端-sslocal">客户端 sslocal</h2>
<h3 id="main"><code>main</code></h3>
<p><a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/local.py#L30"><code>local.py::main</code></a>这个函数不长,我就直接复制过来了.</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="at">@shell.exception_handle</span>(self_<span class="op">=</span><span class="va">False</span>, exit_code<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    shell.check_python()</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># fix py2exe</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">hasattr</span>(sys, <span class="st">&quot;frozen&quot;</span>) <span class="kw">and</span> sys.frozen <span class="kw">in</span> <span class="op">\</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>            (<span class="st">&quot;windows_exe&quot;</span>, <span class="st">&quot;console_exe&quot;</span>):</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        p <span class="op">=</span> os.path.dirname(os.path.abspath(sys.executable))</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        os.chdir(p)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    config <span class="op">=</span> shell.get_config(<span class="va">True</span>) <span class="co"># shell大约是一个&quot;外壳&quot;,用来交互.所以我们使用shell来获得配置文件.</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    daemon.daemon_exec(config) <span class="co"># 启动daemon进程</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    logging.info(<span class="st">&quot;starting local at </span><span class="sc">%s</span><span class="st">:</span><span class="sc">%d</span><span class="st">&quot;</span> <span class="op">%</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>                 (config[<span class="st">&#39;local_address&#39;</span>], config[<span class="st">&#39;local_port&#39;</span>])) <span class="co"># 可以看出来监听的地址和端口是写在配置文件里的.</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    dns_resolver <span class="op">=</span> asyncdns.DNSResolver() <span class="co"># 启动dns,这个dns貌似是不可配置的,因为config没有被传入. </span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    tcp_server <span class="op">=</span> tcprelay.TCPRelay(config, dns_resolver, <span class="va">True</span>) <span class="co"># 创建新的tcp_server和udp_server</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    udp_server <span class="op">=</span> udprelay.UDPRelay(config, dns_resolver, <span class="va">True</span>)</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    loop <span class="op">=</span> eventloop.EventLoop()</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    dns_resolver.add_to_loop(loop)</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    tcp_server.add_to_loop(loop)</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    udp_server.add_to_loop(loop) <span class="co"># 建立一个loop将dns/udp/tcp server都添加到这个loop中.</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> handler(signum, _):</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        logging.warn(<span class="st">&#39;received SIGQUIT, doing graceful shutting down..&#39;</span>)</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        tcp_server.close(next_tick<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        udp_server.close(next_tick<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    signal.signal(<span class="bu">getattr</span>(signal, <span class="st">&#39;SIGQUIT&#39;</span>, signal.SIGTERM), handler) <span class="co"># 注册信号处理函数.</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> int_handler(signum, _):</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        sys.exit(<span class="dv">1</span>)</span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    signal.signal(signal.SIGINT, int_handler) <span class="co"># 注册信号处理函数.</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>    daemon.set_user(config.get(<span class="st">&#39;user&#39;</span>, <span class="va">None</span>))</span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>    loop.run() <span class="co"># 启动</span></span></code></pre></div>
<p><a
href="https://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html">这里</a>有关于两个信号<code>SIGQUIT</code>和<code>SIGINT</code>的区别.</p>
<p>这里可以记下这么几个问题:</p>
<ol type="1">
<li>daemon进程是怎么启动的呢?为什么要等最后<code>loop.run()</code>之前再<code>set_user</code>呢?</li>
<li>为什么dns服务器创建时不读取配置文件?</li>
<li><code>loop</code>是怎么工作的?</li>
<li>三个<code>..._server</code>分别是怎么工作的呢?</li>
</ol>
<p>可以很明显地看出,我们的主要目标应该是3和4.</p>
<p>那么接下来的目标就是<code>loop.run()</code>了.</p>
<h3 id="looprun"><code>loop.run</code></h3>
<p>看一个类的时候我们可以先看它是如何工作的.有什么看不懂的地方再回头看它的构造函数之类的东西.</p>
<p>对于一个过程其实也是一样的.我们可以先看它是如何工作的,然后再看它是怎么初始化的.</p>
<p>落实到这里,就是说我们可以先看<code>run()</code>看不懂了再去看<code>add_to_loop()</code></p>
<p>看看<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/eventloop.py#L193"><code>eventloop.py:run()</code></a></p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    events <span class="op">=</span> []</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="kw">not</span> <span class="va">self</span>._stopping:</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        asap <span class="op">=</span> <span class="va">False</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            events <span class="op">=</span> <span class="va">self</span>.poll(TIMEOUT_PRECISION) <span class="co"># poll 出一个 events, 从下面看 events 中有 sock, fd 和 event 这三个东西.</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">except</span> (<span class="pp">OSError</span>, <span class="pp">IOError</span>) <span class="im">as</span> e:</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> errno_from_exception(e) <span class="kw">in</span> (errno.EPIPE, errno.EINTR):</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>                <span class="co"># EPIPE: Happens when the client closes the connection</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                <span class="co"># EINTR: Happens when received a signal</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                <span class="co"># handles them as soon as possible</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>                asap <span class="op">=</span> <span class="va">True</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>                logging.debug(<span class="st">&#39;poll:</span><span class="sc">%s</span><span class="st">&#39;</span>, e)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>                logging.error(<span class="st">&#39;poll:</span><span class="sc">%s</span><span class="st">&#39;</span>, e)</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>                traceback.print_exc()</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">continue</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> sock, fd, event <span class="kw">in</span> events:</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>            handler <span class="op">=</span> <span class="va">self</span>._fdmap.get(fd, <span class="va">None</span>) <span class="co"># 获得和 fd 对应的 handler</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> handler <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>                handler <span class="op">=</span> handler[<span class="dv">1</span>]</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>                <span class="cf">try</span>:</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                    handler.handle_event(sock, fd, event) <span class="co"># 调用 handler 处理 IO 事件.</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                <span class="cf">except</span> (<span class="pp">OSError</span>, <span class="pp">IOError</span>) <span class="im">as</span> e:</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>                    shell.print_exception(e)</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>        now <span class="op">=</span> time.time()</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> asap <span class="kw">or</span> now <span class="op">-</span> <span class="va">self</span>._last_time <span class="op">&gt;=</span> TIMEOUT_PRECISION:</span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> callback <span class="kw">in</span> <span class="va">self</span>._periodic_callbacks:</span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>                callback()</span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>._last_time <span class="op">=</span> now</span></code></pre></div>
<p>大致上这个loop的工作流程就是:</p>
<p>poll出来一个IO事件,看下这个socket有没有对应的handler,有就去调这个handler.</p>
<p>这里扩充一下问题列表:</p>
<ol type="1">
<li>daemon进程是怎么启动的呢?为什么要等最后<code>loop.run()</code>之前再<code>set_uesr</code>呢?</li>
<li>为什么dns服务器创建时不读取配置文件?</li>
<li><code>loop</code>是怎么工作的?
<ol type="1">
<li><p>handler这个对象是如何注册到loop中的?[是在什么地方被放进<code>_fdmap</code>的呢?]</p></li>
<li><p><code>handler[1]</code>?</p></li>
<li><p>为什么还需要判断<code>handler</code>不为空,什么情况下它会是空呢?</p></li>
<li><p>为什么<code>events</code>遍历的时候会出来<code>sock</code>,<code>fd</code>和<code>event</code>三个变量呢?<code>epoll</code>不是只会有<code>fd</code>和<code>event</code>两个东西告诉程序是哪个文件发生了什么样的事件吗?</p></li>
<li><p>最后看起来是在判断超时的几行代码的意义是什么呢?</p></li>
</ol></li>
<li>三个server分别是怎么工作的呢?</li>
</ol>
<p>那么重点应该是3.1,我们可以猜测这个注册发生在<code>add_to_loop</code>里面.但是我们首先可以发现loop有个方法叫add,这里写了<code>_fdmap</code>.</p>
<p><a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/eventloop.py#L170"><code>eventloop.py:add()</code></a></p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> add(<span class="va">self</span>, f, mode, handler):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    fd <span class="op">=</span> f.fileno()</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._fdmap[fd] <span class="op">=</span> (f, handler)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._impl.register(fd, mode)</span></code></pre></div>
<p>这里有一个注册函数.</p>
<p>在<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/eventloop.py#L147"><code>eventloop.py::__init__()</code></a>中可以看到:我们的<code>_impl</code>就是<code>select.epoll</code>.</p>
<p>那么我们现在可以看看是谁在调用这个<code>add</code>,以<code>TCPRelay</code>的<code>add_to_loop</code>为例:</p>
<h3 id="tcprelay"><code>TCPRelay</code></h3>
<p>在<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/tcprelay.py#L766">这里</a>可以看到</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> add_to_loop(<span class="va">self</span>, loop):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="va">self</span>._eventloop:</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&#39;already add to loop&#39;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="va">self</span>._closed:</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&#39;already closed&#39;</span>)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._eventloop <span class="op">=</span> loop</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._eventloop.add(<span class="va">self</span>._server_socket,</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>                        eventloop.POLL_IN <span class="op">|</span> eventloop.POLL_ERR, <span class="va">self</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._eventloop.add_periodic(<span class="va">self</span>.handle_periodic)</span></code></pre></div>
<p>这里将自己的<code>_server_socket</code>注册给了<code>loop</code>,这个<code>socket</code>肯定是创建<code>TCPRelay</code>的时候建立的.</p>
<p>我们来看看这个创建过程:</p>
<p>在<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/tcprelay.py#L723">这里</a>
我们可以看到:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, config, dns_resolver, is_local, stat_callback<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._config <span class="op">=</span> config</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._is_local <span class="op">=</span> is_local</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._dns_resolver <span class="op">=</span> dns_resolver</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._closed <span class="op">=</span> <span class="va">False</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._eventloop <span class="op">=</span> <span class="va">None</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._fd_to_handlers <span class="op">=</span> {}</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._is_tunnel <span class="op">=</span> <span class="va">False</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._timeout <span class="op">=</span> config[<span class="st">&#39;timeout&#39;</span>]</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._timeouts <span class="op">=</span> []  <span class="co"># a list for all the handlers</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># we trim the timeouts once a while</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._timeout_offset <span class="op">=</span> <span class="dv">0</span>   <span class="co"># last checked position for timeout</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._handler_to_timeouts <span class="op">=</span> {}  <span class="co"># key: handler value: index in timeouts</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> is_local:</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        listen_addr <span class="op">=</span> config[<span class="st">&#39;local_address&#39;</span>]</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        listen_port <span class="op">=</span> config[<span class="st">&#39;local_port&#39;</span>]</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        listen_addr <span class="op">=</span> config[<span class="st">&#39;server&#39;</span>]</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        listen_port <span class="op">=</span> config[<span class="st">&#39;server_port&#39;</span>]</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._listen_port <span class="op">=</span> listen_port</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>    addrs <span class="op">=</span> socket.getaddrinfo(listen_addr, listen_port, <span class="dv">0</span>,</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>                               socket.SOCK_STREAM, socket.SOL_TCP)</span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(addrs) <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&quot;can&#39;t get addrinfo for </span><span class="sc">%s</span><span class="st">:</span><span class="sc">%d</span><span class="st">&quot;</span> <span class="op">%</span></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>                        (listen_addr, listen_port))</span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>    af, socktype, proto, canonname, sa <span class="op">=</span> addrs[<span class="dv">0</span>]</span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>    server_socket <span class="op">=</span> socket.socket(af, socktype, proto)</span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="dv">1</span>)</span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>    server_socket.bind(sa)</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>    server_socket.setblocking(<span class="va">False</span>)</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> config[<span class="st">&#39;fast_open&#39;</span>]:</span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>            server_socket.setsockopt(socket.SOL_TCP, <span class="dv">23</span>, <span class="dv">5</span>)</span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>        <span class="cf">except</span> socket.error:</span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>            logging.error(<span class="st">&#39;warning: fast open is not available&#39;</span>)</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>._config[<span class="st">&#39;fast_open&#39;</span>] <span class="op">=</span> <span class="va">False</span></span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>    server_socket.listen(<span class="dv">1024</span>)</span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._server_socket <span class="op">=</span> server_socket</span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>._stat_callback <span class="op">=</span> stat_callback</span></code></pre></div>
<p>这就是创建socket,bind,listen的三部曲了.这里还能看到一个Fast
Open的设置.</p>
<p>使用了非阻塞的 socket.</p>
<p>接下来的问题就是:</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="va">self</span>._eventloop.add(<span class="va">self</span>._server_socket,</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>                        eventloop.POLL_IN <span class="op">|</span> eventloop.POLL_ERR, <span class="va">self</span>)</span></code></pre></div>
<p>这个地方,向<code>_eventloop</code>注册事件的时候,实际上添加进去的handle是self.</p>
<p>在上面这里的<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/eventloop.py#L193"><code>eventloop.py:run()</code></a>中:</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> sock, fd, event <span class="kw">in</span> events:</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>            handler <span class="op">=</span> <span class="va">self</span>._fdmap.get(fd, <span class="va">None</span>) <span class="co"># 获得和fd对应的handler</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> handler <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>                handler <span class="op">=</span> handler[<span class="dv">1</span>]</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>                <span class="cf">try</span>:</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>                    handler.handle_event(sock, fd, event) <span class="co"># 调用handler处理IO事件.</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>                <span class="cf">except</span> (<span class="pp">OSError</span>, <span class="pp">IOError</span>) <span class="im">as</span> e:</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>                    shell.print_exception(e)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div>
<p>调用了<code>handle_event()</code>方法,那我们来看一下</p>
<p><a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/tcprelay.py#L835">这里</a></p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> handle_event(<span class="va">self</span>, sock, fd, event):</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>        <span class="co"># handle events and dispatch to handlers</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> sock:</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>            logging.log(shell.VERBOSE_LEVEL, <span class="st">&#39;fd </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%s</span><span class="st">&#39;</span>, fd,</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>                        eventloop.EVENT_NAMES.get(event, event))</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> sock <span class="op">==</span> <span class="va">self</span>._server_socket: <span class="co"># 如果是监听新连接的socket</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> event <span class="op">&amp;</span> eventloop.POLL_ERR:</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>                <span class="co"># </span><span class="al">TODO</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">&#39;server_socket error&#39;</span>)</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>            <span class="cf">try</span>:</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>                logging.debug(<span class="st">&#39;accept&#39;</span>)</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>                conn <span class="op">=</span> <span class="va">self</span>._server_socket.accept()</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>                TCPRelayHandler(<span class="va">self</span>, <span class="va">self</span>._fd_to_handlers, <span class="co"># 创建处理单个连接的handler,并将其注册到eventloop中.</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>                                <span class="va">self</span>._eventloop, conn[<span class="dv">0</span>], <span class="va">self</span>._config,</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>                                <span class="va">self</span>._dns_resolver, <span class="va">self</span>._is_local)</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">except</span> (<span class="pp">OSError</span>, <span class="pp">IOError</span>) <span class="im">as</span> e:</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>                error_no <span class="op">=</span> eventloop.errno_from_exception(e)</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> error_no <span class="kw">in</span> (errno.EAGAIN, errno.EINPROGRESS,</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>                                errno.EWOULDBLOCK):</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span>:</span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>                    shell.print_exception(e)</span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> <span class="va">self</span>._config[<span class="st">&#39;verbose&#39;</span>]:</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>                        traceback.print_exc()</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>: </span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> sock: <span class="co"># 如果这个socket不是监听新连接的.那么这意味着我们可以在一个map里面找到它的handler.调用它.</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>                handler <span class="op">=</span> <span class="va">self</span>._fd_to_handlers.get(fd, <span class="va">None</span>)</span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> handler:</span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>                    handler.handle_event(sock, event)</span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>                logging.warn(<span class="st">&#39;poll removed fd&#39;</span>)</span></code></pre></div>
<p>可以在<code>TCPRelayHandler</code>的<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/tcprelay.py#L152">构造函数</a>中看到:</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, server, fd_to_handlers, loop, local_sock, config,</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>              dns_resolver, is_local):</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>._server <span class="op">=</span> server</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>        ...</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>        loop.add(local_sock, eventloop.POLL_IN <span class="op">|</span> eventloop.POLL_ERR,</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>                 <span class="va">self</span>._server)</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>        ...</span></code></pre></div>
<p>这里产生了一个新的疑问,为什么创建好新连接进来的socket对应的handler之后向eventloop中注册处理函数的时候不干脆直接注册成新生成的handler呢?还将它注册成<code>TCPRelay</code>呢?</p>
<p>更新一下疑问列表:</p>
<ol type="1">
<li>daemon进程是怎么启动的呢?为什么要等最后<code>loop.run()</code>之前再<code>set_uesr</code>呢?</li>
<li>为什么dns服务器创建时不读取配置文件?</li>
<li><code>loop</code>是怎么工作的?
<ol type="1">
<li><p>handler这个对象是如何注册到loop中的?[是在什么地方被放进<code>_fdmap</code>的呢?]</p></li>
<li><p><code>handler[1]</code>?</p></li>
<li><p>为什么还需要判断handler不为空,什么情况下它会是空呢?</p></li>
<li><p>为什么<code>events</code>遍历的时候会出来<code>sock</code>
<code>fd</code>和<code>event</code>三个变量呢?<code>epoll</code>不是只会有<code>fd</code>和<code>event</code>两个东西告诉程序是哪个文件发生了什么样的事件吗?</p></li>
<li><p>最后看起来是在判断超时的几行代码的意义是什么呢?</p></li>
</ol></li>
<li>三个server分别是怎么工作的呢?
<ol type="1">
<li>为什么TCPRelay生成完新handler不直接将对应的socket处理函数注册成新生成的
handler,反而要把它注册成生成了这个handler的TCPRelay呢?</li>
</ol></li>
</ol>
<p>不过总体来说整个流程就十分清楚了.</p>
<h2 id="主要流程">主要流程</h2>
<p>我们有一个主循环,这个主事件循环从epoll中拉出发生了IO事件的<code>fd</code>,然后从一个map中找到这个<code>fd</code>对应的handler,调用这个handler的<code>handle_event</code>函数来处理这个<code>fd</code>发生的IO事件.</p>
<p>对于TCP连接的处理而言,我们把所有TCP连接的handle注册成了TCPRelay.也就是说所有TCP
接对应的socket发生IO事件之后,都会调用TCPRelay下面的<code>handle_event</code>.如果是老连接,
我们就从TCPRelay下的另一个<code>fd</code>到handle的map里面找到这个socket对应的handle,调用
handle来处理IO事件;如果是新连接,就创建一个新的<code>TCPRelayHandler</code>,将它写进TCPRelay
下的map.</p>
<p>大致就是这样了.</p>
<p>至于<code>TCPRelaHandler</code>是怎么处理IO事件的.等我想看了,再写一篇文章就是了.</p>
<h2 id="问题">问题</h2>
<p>那么我们现在把之前遗留的几个问题一一处理一下:</p>
<ol type="1">
<li><p>daemon进程是怎么启动的呢?为什么要等最后<code>loop.run()</code>之前再<code>set_user</code>呢?</p></li>
<li><p>为什么dns服务器创建时不读取配置文件?</p>
<p>这里只是在本地端创建dns不需要读取配置文件.sever端的<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/server.py#L61">代码中</a>可以看到:</p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>dns_resolver <span class="op">=</span> asyncdns.DNSResolver(config[<span class="st">&#39;dns_server&#39;</span>],</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>                                    config[<span class="st">&#39;prefer_ipv6&#39;</span>])</span></code></pre></div></li>
<li><p><code>loop</code>是怎么工作的?</p>
<ol type="1">
<li><p>handler这个对象是如何注册到loop中的?[是在什么地方被放进<code>_fdmap</code>的呢?]</p>
<p>回答过了</p></li>
<li><p><code>handler[1]</code>?</p>
<p>在<a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/eventloop.py#L160">这里</a>可以看到</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="va">self</span>._fdmap <span class="op">=</span> {}  <span class="co"># (f, handler)</span></span></code></pre></div>
<p>这里的<code>f</code>是那个file对象.所以这里需要取第二个,第二个才是真正的handler.</p></li>
<li><p>为什么还需要判断handler不为空,什么情况下它会是空呢?</p></li>
<li><p>为什么<code>events</code>遍历的时候会出来<code>sock</code>
<code>fd</code>和<code>event</code>三个变量呢?<code>epoll</code>不是只会有<code>fd</code>和<code>event</code>两个东西告诉程序是哪个文件发生了什么样的事件吗?</p>
<p><a
href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/eventloop.py#L168">这里</a>可以看到,我们通过这个<code>_fdmap</code>取到了<code>fd</code>对应的file对象.</p>
<div class="sourceCode" id="cb14"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> [(<span class="va">self</span>._fdmap[fd][<span class="dv">0</span>], fd, event) <span class="cf">for</span> fd, event <span class="kw">in</span> events]</span></code></pre></div></li>
<li><p>最后看起来是在判断超时的几行代码的意义是什么呢?</p></li>
</ol></li>
<li><p>三个server分别是怎么工作的呢?</p>
<ol type="1">
<li>为什么TCPRelay生成完新handler不直接将对应的socket处理函数注册成新生成的handler,反而要把它注册成生成了这个handler的TCPRelay呢?</li>
</ol></li>
</ol>
<h2 id="遗留问题">遗留问题</h2>
<p>那么现在留下的问题是这几个:</p>
<ol type="1">
<li><p>daemon进程是怎么启动的呢?为什么要等最后<code>loop.run()</code>之前再<code>set_user</code>呢?</p></li>
<li><p><code>loop</code>是怎么工作的?</p>
<ol type="1">
<li><p>为什么还需要判断handler不为空,什么情况下它会是空呢?</p></li>
<li><p>最后看起来是在判断超时的几行代码的意义是什么呢?</p></li>
</ol></li>
<li><p>三个server分别是怎么工作的呢?</p>
<ol type="1">
<li>为什么TCPRelay生成完新handler不直接将对应的socket处理函数注册成新生成的handler,反而要把它注册成生成了这个handler的TCPRelay呢?</li>
</ol></li>
</ol>
<p>以及我们接下来还有一些希望了解到的内容,比如<code>TCPRelayHandler</code>到底需要处理哪些IO事件,分别又都是怎么处理的呢?</p>
]]></content:encoded></item><item><title>只是为了把 Steam 游戏放到开始屏幕上</title><link>https://blog.black-desk.cn/post/%E5%8F%AA%E6%98%AF%E4%B8%BA%E4%BA%86%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E6%94%BE%E5%88%B0%E5%BC%80%E5%A7%8B%E5%B1%8F%E5%B9%95%E4%B8%8A/</link><pubDate>Sun, 10 Jul 2022 02:23:58 +0800</pubDate><guid>https://blog.black-desk.cn/post/%E5%8F%AA%E6%98%AF%E4%B8%BA%E4%BA%86%E6%8A%8A-steam-%E6%B8%B8%E6%88%8F%E6%94%BE%E5%88%B0%E5%BC%80%E5%A7%8B%E5%B1%8F%E5%B9%95%E4%B8%8A/</guid><description>很久以前, 我有一个梦想, 我的开始菜单上能直接固定一些 steam 游戏的磁贴.
然后我苦苦地寻找, 发现了这篇知乎文章, 然后我忍痛剁手, 花了我六块大洋, 买了这个叫 Steam Tiles 的 UWP 应用, 而这一切, 只是噩梦的开始.
初次使用这个 UWP 应用, 它就刷新了我的三观. 一个功能如此简单的应用居然能这么卡.
它需要读你安装 steam 游戏的目录, 然后从里面寻找合适大小的图片来制作磁贴, 也允许用户自定义图片, 可以从 url 下载图片, 可以从本地选取图片文件, 允许用户改变图片的位置, 大小, 以及磁贴的背景色.
听起来很美好, 该自定义的都能自定义. 但是事实上.
我是想破脑袋也想不出来, 为什么他读文件找图片能这么慢, 5个游戏, 他头一次找个图要将近半个小时.
image-20200504214634198 不仅慢, 还有可能会读不出图片来, 比如像下面这样:
image-20200504213156290 而这个时候我唯一找到的解决方法, 就是 TMD 清除掉他对于图片的缓存, 然后再让他找一次.
为什么这么慢呢? 我也不知道. 任务管理器开起来一看:
image-20200504213307798 不占用 CPU, 内存也不大, 那是磁盘读写么?
image-20200504213452252 看起来也不是磁盘读写.那咋回事呢? 天知道.</description><content:encoded><![CDATA[<p>很久以前, 我有一个梦想, 我的开始菜单上能直接固定一些 steam
游戏的磁贴.</p>
<p>然后我苦苦地寻找, 发现了<a
href="https://zhuanlan.zhihu.com/p/28416752">这篇</a>知乎文章,
然后我忍痛剁手, 花了我六块大洋, 买了这个叫 Steam Tiles 的 UWP 应用,
而这一切, 只是噩梦的开始.</p>
<hr />
<p>初次使用这个 UWP 应用, 它就刷新了我的三观.
一个功能如此简单的应用居然能这么卡.</p>
<p>它需要读你安装 steam 游戏的目录,
然后从里面寻找合适大小的图片来制作磁贴, 也允许用户自定义图片, 可以从 url
下载图片, 可以从本地选取图片文件, 允许用户改变图片的位置, 大小,
以及磁贴的背景色.</p>
<p>听起来很美好, 该自定义的都能自定义. 但是事实上.</p>
<p>我是想破脑袋也想不出来, 为什么他读文件找图片能这么慢, 5个游戏,
他头一次找个图要将近半个小时.</p>
<figure>
<img src="https://i.loli.net/2020/05/04/gFqwyaEukvbALjJ.png"
alt="image-20200504214634198" />
<figcaption aria-hidden="true">image-20200504214634198</figcaption>
</figure>
<p>不仅慢, 还有可能会读不出图片来, 比如像下面这样:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/xCsnIKF9TBfRwUt.png"
alt="image-20200504213156290" />
<figcaption aria-hidden="true">image-20200504213156290</figcaption>
</figure>
<p>而这个时候我唯一找到的解决方法, 就是 TMD 清除掉他对于图片的缓存,
然后再让他找一次.</p>
<p>为什么这么慢呢? 我也不知道. 任务管理器开起来一看:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/MKvWVlPTcQGzHOr.png"
alt="image-20200504213307798" />
<figcaption aria-hidden="true">image-20200504213307798</figcaption>
</figure>
<p>不占用 CPU, 内存也不大, 那是磁盘读写么?</p>
<figure>
<img src="https://i.loli.net/2020/05/04/eKTNusvSVZ3Co9m.png"
alt="image-20200504213452252" />
<figcaption aria-hidden="true">image-20200504213452252</figcaption>
</figure>
<p>看起来也不是磁盘读写.那咋回事呢? 天知道.</p>
<p>好在这种找图的过程在你使用这个软件的过程中只会出现一次
(当然如果你装了个新游戏, 然后想把它钉在开始菜单里面,
你又会经历一遍这个神奇的事情.) 经过几次的尝试,
我终于可以正常的加载出图片了, 这个时候我发现了一个特别操蛋的事情.</p>
<figure>
<img src="https://i.loli.net/2020/05/04/3tEiTaeurcUo8lC.png"
alt="image-20200504213638142" />
<figcaption aria-hidden="true">image-20200504213638142</figcaption>
</figure>
<p>看到那个输入 url 的框了么? 它怎么了呢? 事情是这样的.
你只要往里面打一个字, 这个框就会实去焦点,
然后你得把你的鼠标再点击一次这个框, 才能再次打一个字母. 虽然我知道,
一般人确实不会手打 url, 这个 bug 在你粘贴 url 进去的时候并不会出现,
但是我也很难想象一个开发者往自己的应用里面放了一个输入框,
而他连在这个输入框里面打字来做一下测试这种事情都没有做过.</p>
<p>哦不, 也许他真的做过, 不信你接着看.</p>
<hr />
<p>有玩过桌面开发框架的应该都知道这个 bug 是怎么出现的,
类似输入框这种控件, 它在里面的文字改变的时候, 会触发一个叫 Text Changed
的事件, 开发者可以配置程序, 然后让程序在这个事件发生的时候运行一段代码.
而由于不知道什么原因, 这个 UWP 应用的这段代码会使得输入框失去焦点,
所以这个魔性的 bug 就产生了.</p>
<p>解决的办法其实也很明显, 我们其实只要把这段代码从 Text Changed 解绑,
然后绑定到比如 Lose Focus 这种事件上去就行了.</p>
<p>但是这是一个在微软应用商店上架的, 收费的, 应用软件.
我应该是看不到它的源码的. 所以我没有办法修正这个傻逼至极的错误.</p>
<p>嗯? 真的是这样么?</p>
<figure>
<img src="https://i.loli.net/2020/05/04/hLrUG1EKqBIjus3.png"
alt="image-20200504213724438" />
<figcaption aria-hidden="true">image-20200504213724438</figcaption>
</figure>
<p>???</p>
<hr />
<p>这个老哥的心非常的大, 他居然把自己放在应用商店贩卖的应用的源码公布了!
虽然这种操作是挺正常的. 也有一些很棒的软件在做类似的事情,
开源和收费的确不矛盾, 但是还算是比较少见的.</p>
<p>但是打开了他的 github, 我就发现这个事情非常的诡异:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/reYa3s52xMAi8fl.png"
alt="image-20200504213838350" />
<figcaption aria-hidden="true">image-20200504213838350</figcaption>
</figure>
<p>嗯?</p>
<figure>
<img src="https://i.loli.net/2020/05/04/5cRrqLIBm4n9ugA.png"
alt="image-20200504213915629" />
<figcaption aria-hidden="true">image-20200504213915629</figcaption>
</figure>
<p>真的是头一回见啊.</p>
<p>更有意思的是:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/Y9M78IkXGVO41eD.png"
alt="image-20200504213944643" />
<figcaption aria-hidden="true">image-20200504213944643</figcaption>
</figure>
<p>就是说这哥们开发这玩意整整四年了, 然后这个输入框的 bug
仍然存在????</p>
<p>我本着好奇的心态看了一下他的 commit, 然后我震惊了: 除了下面这八个
commit 以外,</p>
<figure>
<img src="https://i.loli.net/2020/05/04/FYkbGqUANRahHwZ.png"
alt="image-20200504214039085" />
<figcaption aria-hidden="true">image-20200504214039085</figcaption>
</figure>
<figure>
<img src="https://i.loli.net/2020/05/04/wz7ycOiBAlQkmeo.png"
alt="image-20200504214057873" />
<figcaption aria-hidden="true">image-20200504214057873</figcaption>
</figure>
<figure>
<img src="https://i.loli.net/2020/05/04/8r6fYhjtcZb4p2U.png"
alt="image-20200504214111285" />
<figcaption aria-hidden="true">image-20200504214111285</figcaption>
</figure>
<p>他的整整 146 个 commit, 都是这个画风:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/FhQIHmpbuXrCU9l.png"
alt="image-20200504214125833" />
<figcaption aria-hidden="true">image-20200504214125833</figcaption>
</figure>
<p>哇, nb, 我已经可以预见到这哥们不会写任何的注释和文档了.</p>
<hr />
<p>我下载代码, 把他给代码打的证书删除, 稍微调整了一下配置文件.
我就可以编译这个软件了!</p>
<p>哇哦, 那我一开始花了六块钱买这玩意不是血亏?</p>
<p>算了算了.</p>
<p>我们赶紧来看代码, 先把这个傻逼的 bug 修了吧.</p>
<figure>
<img src="https://i.loli.net/2020/05/04/RkWowNbLzZOjGuh.png"
alt="image-20200504214246118" />
<figcaption aria-hidden="true">image-20200504214246118</figcaption>
</figure>
<p>但是我眉头一皱, 发现事情并不简单, 就在上面这个图力,
输入框下面的这个下拉菜单应该对应的是程序中的这个:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/9VpnmC2JEjS5gTK.png"
alt="image-20200504214302928" />
<figcaption aria-hidden="true">image-20200504214302928</figcaption>
</figure>
<p>但是为什么这玩意的两个选项, 他们并没有自己的名字, 而是用 1 和 2
编号呢???</p>
<p>回想一下刚刚那整整 <span class="math display">\[146-8=132\]</span> 个
commit, 我释怀了, 修 bug 吧.</p>
<p>果不其然, 我上面的猜测是对的, 在对应的程序里我看到了这么<a
href="%5Bhttps://github.com/pepeizq/Steam-Tiles/blob/master/Steam%20Tiles/Modulos/Tiles/Personalizacion.vb#L125%5D">一行</a>:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/Oknv6D8GuQrSHKm.png"
alt="image-20200504214320965" />
<figcaption aria-hidden="true">image-20200504214320965</figcaption>
</figure>
<p>可以看到开发者将一个叫 <code>CambioImagenInternet</code>
的函数绑定到了这个输入框的 <code>TextChanged</code> 上.</p>
<p>但是, 等一下, Cambio 这个词我不认识可能确实是因为我英语垃圾, 但是
Imagen 是个什么鬼. 不是 Image 么?</p>
<p>为了防止我需要重新回去读小学英语, 我决定查一下 Cambio 这个词:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/1R3J9aSqXPuNhbc.png"
alt="image-20200504214341048" />
<figcaption aria-hidden="true">image-20200504214341048</figcaption>
</figure>
<p>哦, 那看来不是我的问题, 而是这个老哥是个西班牙人, 看了一眼 github
主页, 果然是这样:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/KmuysZUVv7YH1Gj.png"
alt="image-20200504214410625" />
<figcaption aria-hidden="true">image-20200504214410625</figcaption>
</figure>
<p>好吧好吧, 但是你为什么给这个框绑一个函数得先解绑呢?</p>
<p>以及你这个解绑外面为什么会有一个
<code>If Not tbImagenInternet Is Nothing</code> 呢?</p>
<p>然后我发现了一个令我感到迷惑的事情:</p>
<p>这个老哥他在同一个类下面, 多次需要找到同一个控件的时候,
他每次都会写这几行代码:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode vb"><code class="sourceCode monobasic"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">Dim</span> frame <span class="kw">As</span> Frame = Window.Current.Content</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">Dim</span> pagina <span class="kw">As</span> Page = frame.Content</span></code></pre></div>
<p>然后再用 <code>pagina.FindName</code> 去直接通过这个控件的 id
找到它.</p>
<p>讲个鬼故事:</p>
<figure>
<img src="https://i.loli.net/2020/05/04/IW8QvDCZfqNhjPw.png"
alt="image-20200504214441345" />
<figcaption aria-hidden="true">image-20200504214441345</figcaption>
</figure>
<p>同一份代码里面, 上面这两句话出现了十六次.</p>
<p>我的人生阅历增加了! 这个奇怪的软件里出现什么样的事情,
我都不会奇怪了吧!</p>
<p>大概.</p>
<hr />
<p>为了搞清楚他到底为什么要这么来绑定函数,
我打了断点看了看这个程序的逻辑,</p>
<p>然后我发现有的时候, 一个明明存在的控件, id 也对,
我也可以在窗口中看到这个控件的情况下, <code>pagine.FindName</code>
也有可能会找不到它. 具体原理我并不明白.</p>
<p>这个时候碰巧我发现了另一个 bug, 真是一波未平一波又起.</p>
<figure>
<img src="https://i.loli.net/2020/05/04/E4fS1lcsz7FCvAu.png"
alt="image-20200504214905779" />
<figcaption aria-hidden="true">image-20200504214905779</figcaption>
</figure>
<p>上面这个是调整图片大小和位置的窗口, 如果我们选中一个游戏, 编辑大磁贴,
在这里改变 Margin 和 X 还有 Y, 然后保存并返回, 再编辑中磁贴的时候,
这里的 Margin 和 X Y 的滑块并不会归位, 而是会保持刚刚的状态.</p>
<p>? 这是初始化写错了么?</p>
<p>不对啊, <a
href="https://github.com/pepeizq/Steam-Tiles/blob/master/Steam%20Tiles/Modulos/Tiles/Personalizacion.vb#L168">这里</a>是有初始化的啊?</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode vb"><code class="sourceCode monobasic"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">Dim</span> sliderImagenMargen <span class="kw">As</span> Slider = pagina.FindName(<span class="st">&quot;sliderPersonalizacionImagenMargen&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">If Not</span> sliderImagenMargen Is <span class="kw">Nothing</span> <span class="kw">Then</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    sliderImagenMargen.Minimum = 0</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    RemoveHandler sliderImagenMargen.ValueChanged, AddressOf CambiarImagenMargen</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">AddHandler</span> sliderImagenMargen.ValueChanged, AddressOf CambiarImagenMargen</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">End If</span></span></code></pre></div>
<p>难道? 第二次打开这个窗口的时候, <code>FindName</code> 找不到这个控件,
所以就没有清0 ?</p>
<p>我大概知道这个老哥写出这段代码的心路历程了:</p>
<blockquote>
<p>我们现在来写初始化吧, 那么写初始化肯定得先用 <code>FindName</code>
找到对应的控件吧? 哎呀? <code>FindName</code> 有的时候找不到?
找不到咋办啊? 算了算了, 找不到就不初始化了.</p>
</blockquote>
<p>关于先解绑再绑定估计是这样的:</p>
<blockquote>
<p>我现在要给这些个控件触发的事件绑定函数了! 在哪里绑呢?
在窗口初始化里面写吧, 就跟在控件初始化后面! emmm,
但是我写的这个所谓的控件初始化是每次打开窗口都会运行的,
所以写在这里的代码会被运行多次, 但是一个事件又不能绑上多个函数,
那样会出错的. 啊! 我只要每次都先解绑再绑定不就可以了么!
我真是个小天才.</p>
</blockquote>
<p>我真是惊了.</p>
<hr />
<p>经过一些调试我发现这个函数第一次运行的时候, <code>FindName</code>
是真的能找到所有的控件的. 所以我稍微整理了一下, 在类里面加了几个成员,
把这些控件都存了一个引用在类里面, 这样要用的时候就不用重新
<code>FindName</code> 了.
同时把这个先解绑然后再绑定的神代码也给整成了只会运行一次.</p>
<p>现在这个软件已经基本能用了.</p>
<p>然后我决定再来看看这里面还有什么奇葩东西.</p>
<p>然后我就在<a
href="https://github.com/pepeizq/Steam-Tiles/blob/master/Steam%20Tiles/Modulos/Tiles/Personalizacion.vb#L467">这里</a>看到了一个奇葩函数.
看不懂没关系, 我一开始也看不懂. 但是我花了很大力气看懂了以后,
我被雷到了, 这是一种很神奇的快乐, 现在我来解释一下这个东西有多奇葩:</p>
<p>这个函数是绑给刚才看到的那个下拉框选 inner box 还是 outer box 的.
我们可以先不管它为什么要这么设计这个程序,
我们边看这个程序边给你大概描述一下这个函数要做的工作是什么: 现在有两个
grid 控件, 它们一个是 <code>gridPersonalizacionExterior</code>, 是那个
Outer box, 另一个是下面找的那个
<code>gridPersonalizacionInterior</code>, 是那个 Inner box, 看 xaml
文件可以知道.这两个东西的关系是这样的:</p>
<pre><code>Outer box
|- Inner box</code></pre>
<p>如果图片在 Inner box 里面, 那么应该是这样的:</p>
<pre><code>Outer box
|- Inner box
   |- Image</code></pre>
<p>而如果图片在 Outer box 里面, 作者它希望他们之间的结构变成这样:</p>
<pre><code>Outer box
|- Inner box
|- Image</code></pre>
<p>我们一起来看看作者是怎么处理这个功能的吧.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode vb"><code class="sourceCode monobasic"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">Private</span> <span class="kw">Sub </span>CambiarImagenUbicacion(sender <span class="kw">As</span> <span class="dt">Object</span>, e <span class="kw">As</span> SelectionChangedEventArgs)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>   </span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Dim</span> frame <span class="kw">As</span> Frame = Window.Current.Content</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Dim</span> pagina <span class="kw">As</span> Page = frame.Content</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39; 上面这两句就是那重复的16遍里的其中一遍.</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Dim</span> cb <span class="kw">As</span> ComboBox = sender</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Dim</span> imagen <span class="kw">As</span> <span class="kw">New</span> ImageEx</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Dim</span> gridExterior <span class="kw">As</span> Grid = pagina.FindName(<span class="st">&quot;gridPersonalizacionExterior&quot;</span>)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39; 这代码是修改前的, 所以我们在这里还能看到作者用FindName来找控件.</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>   </span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>   <span class="kw">For </span>Each hijo In gridExterior.Children</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>       <span class="co">&#39; 遍历 Outer box 的所有孩子: [ 等一下, 这是图啥, Outer box要不然是一个孩子要不然是两个孩子你快住手啊!</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>       <span class="kw">Dim</span> imagen2 <span class="kw">As</span> ImageEx = <span class="kw">Nothing</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>       <span class="co">&#39; 创建一个 imagen2</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>       <span class="co">&#39; 看看 Outer box 的孩子能不能赋值给 imagen2, 如果成功了说明这个孩子是一张图, 说明图片现在在 Outer box 里面</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>       <span class="kw">Try</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>           imagen2 = hijo</span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>       </span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>       <span class="kw">Catch</span> ex <span class="kw">As</span> <span class="dt">Exception</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>       <span class="kw">End Try</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>       <span class="kw">If Not</span> imagen2 Is <span class="kw">Nothing</span> <span class="kw">Then</span> </span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>           imagen.Source = imagen2.Source</span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>           imagen.IsCacheEnabled = imagen2.IsCacheEnabled</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>           imagen.Stretch = imagen2.Stretch</span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">&#39; 把试出来的imagen2里面的图片数据,赋值给imagen[ 等一下, 那你为什么不一开始就用imagen来试呢?</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>           gridExterior.Children.Remove(hijo)</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>       <span class="kw">End If</span></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Next</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39; 以上同样的事情对 Inner box 再做一次, 这两个过程中总会有一个能找到那张图.</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Dim</span> gridInterior <span class="kw">As</span> Grid = pagina.FindName(<span class="st">&quot;gridPersonalizacionInterior&quot;</span>)</span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>   <span class="kw">For </span>Each hijo In gridInterior.Children</span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>       <span class="kw">Dim</span> imagen2 <span class="kw">As</span> ImageEx = <span class="kw">Nothing</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>       <span class="kw">Try</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>           imagen2 = hijo</span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>       <span class="kw">Catch</span> ex <span class="kw">As</span> <span class="dt">Exception</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a>       <span class="kw">End Try</span></span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a>       <span class="kw">If Not</span> imagen2 Is <span class="kw">Nothing</span> <span class="kw">Then</span></span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a>           imagen.Source = imagen2.Source</span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a>           imagen.IsCacheEnabled = imagen2.IsCacheEnabled</span>
<span id="cb6-49"><a href="#cb6-49" aria-hidden="true" tabindex="-1"></a>           imagen.Stretch = imagen2.Stretch</span>
<span id="cb6-50"><a href="#cb6-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-51"><a href="#cb6-51" aria-hidden="true" tabindex="-1"></a>           gridInterior.Children.Remove(hijo)</span>
<span id="cb6-52"><a href="#cb6-52" aria-hidden="true" tabindex="-1"></a>       <span class="kw">End If</span></span>
<span id="cb6-53"><a href="#cb6-53" aria-hidden="true" tabindex="-1"></a>   <span class="kw">Next</span></span>
<span id="cb6-54"><a href="#cb6-54" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39; 到这里为止,我们拿到了图, 我们只要把图放到对应的框里面就写完啦!</span></span>
<span id="cb6-55"><a href="#cb6-55" aria-hidden="true" tabindex="-1"></a>   <span class="kw">If </span>cb.SelectedIndex = 0 <span class="kw">Then</span></span>
<span id="cb6-56"><a href="#cb6-56" aria-hidden="true" tabindex="-1"></a>       gridInterior.Children.Add(imagen)</span>
<span id="cb6-57"><a href="#cb6-57" aria-hidden="true" tabindex="-1"></a>   ElseIf cb.SelectedIndex = 1 <span class="kw">Then</span></span>
<span id="cb6-58"><a href="#cb6-58" aria-hidden="true" tabindex="-1"></a>       gridExterior.Children.Add(imagen)</span>
<span id="cb6-59"><a href="#cb6-59" aria-hidden="true" tabindex="-1"></a>   <span class="kw">End If</span></span>
<span id="cb6-60"><a href="#cb6-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-61"><a href="#cb6-61" aria-hidden="true" tabindex="-1"></a><span class="kw">End Sub</span></span></code></pre></div>
<p>我一时间不知道说什么好.</p>
<hr />
<p>我 fork 了一份, 大概修了修, 修到我能用的程度就停手了, 因为我实在是,
感觉自己的智商受到了侮辱, 甚至折损了阳寿.项目地址在<a
href="https://github.com/black-desk/Steam-Tiles">这里</a>, 还有很多 bug
我没管, 一开始说的那个性能问题我也没管. 我自己编译了一份扔上去了.
要是有人想用的话可以自己查一下怎么安装.</p>
<p>是的, 为了这个开始屏幕, 我刷新了我的三观.</p>
<figure>
<img src="https://i.loli.net/2020/05/04/AmuqEhfIndWBOgi.png"
alt="image-20200504214511318" />
<figcaption aria-hidden="true">image-20200504214511318</figcaption>
</figure>
<p>而这一切只是为了, 把steam游戏, 放在开始屏幕上.</p>
]]></content:encoded></item><item><title>记一个沙雕软件的破解</title><link>https://blog.black-desk.cn/post/overgrive/</link><pubDate>Sun, 10 Jul 2022 02:23:58 +0800</pubDate><guid>https://blog.black-desk.cn/post/overgrive/</guid><description>本文是一篇日记性质的碎碎念,唠叨和啰嗦在所难免,请见谅.
故事是这样的,我突然想要一个能够在ubuntu上同步Google Drive的软件.我需要这个软件能够监控我磁盘上的文件变化,一旦文件变化了就上传;当然Google Drive上的文件要是发生了变化,也得能够同步到我的磁盘上.
本来以为RClone可以,但是后来发现它只能单向同步,相当于是个备份工具,不能够满足我的要求.
其实我也不希望搞那种很专业的工具,能有谷歌自己在Windows上做的那个"备份与同步" 那点功能,其实就可以了.配置最好也不要太麻烦.
所以我找到了Insync,这是一个支持OneDrive和Google Drive的同步客户端.并不开源,而且售价有点高,要40刀.
我暂时用不到OneDrive,而且这个钱说实话是不想花的(主要还是实在太贵了.
于是我转头又找到了OverGrive,这是一个南非的网站(/组织?)搞的一个Google Drive客户端,也不免费,但是只要5刀了,勉强可以接受.
于是我拿出了我办的浦发双币visa卡.这张卡我办完了以后当时拿来尝试绑Google Play没绑上,所以就一直没用上.不过不用公本费,也没有年金,更没有额度,我只能用支付宝,或者其他银行卡往里面存钱,之后才能消费美元.
这下终于算是派上了用场.
然后迎接我的就是付款失败.里面的钱明明够啊?为啥呢?
打客服电话问了一下,说是这个商户被判定为有可能是投资目标之类的东西,所以被限制交易了.啊这(
那没什么办法,我就淘宝上找了个paypal代付.
结果24h过去了,我仍然没有从我的邮降收到我的激活码邮件,我非常确定没有在垃圾桶里.
当然这个软件是有试用版的,有14天的试用期,可能是开发者认为只要14天以内发激活码就行了么???
不过,由于这个软件存在一些启动过程中的问题,所以我稍微研究了一下它,发现这是一个 python写的东西,于是我用uncompyle6,给它反编译了一下,看到了源码.
不过反编译出来的源码并不能正常运行,存在一些问题,应该是反编译的时候控制流识别出错了.
但是我却因此能够看到它的激活流程:
def on_activation_button(widget): global licenseDisplay global splashProgressBar global splashWindow if &amp;#39;ProgressBar&amp;#39; in str(splashGrid.get_child_at(0, 4)): Gtk.Container.remove(splashGrid, splashProgressBar) splashGrid.attach(splashEntry, 0, 4, 2, 1) splashEntry.set_tooltip_text(_(&amp;#39;Copy and Paste your&amp;#39;) + &amp;#39; &amp;#39; + appDisplayName + &amp;#39; &amp;#39; + _(&amp;#39;Activation code&amp;#39;)) splashEntry.set_placeholder_text(_(&amp;#39;Enter Activation Code&amp;#39;)) splashLabel3.</description><content:encoded><![CDATA[<p>本文是一篇日记性质的碎碎念,唠叨和啰嗦在所难免,请见谅.</p>
<p>故事是这样的,我突然想要一个能够在ubuntu上同步Google
Drive的软件.我需要这个软件能够监控我磁盘上的文件变化,一旦文件变化了就上传;当然Google
Drive上的文件要是发生了变化,也得能够同步到我的磁盘上.</p>
<p>本来以为<a
href="https://rclone.org/">RClone</a>可以,但是后来发现它只能单向同步,相当于是个备份工具,不能够满足我的要求.</p>
<p>其实我也不希望搞那种很专业的工具,能有谷歌自己在Windows上做的那个"备份与同步"
那点功能,其实就可以了.配置最好也不要太麻烦.</p>
<p>所以我找到了<a
href="https://www.insynchq.com/">Insync</a>,这是一个支持OneDrive和Google
Drive的同步客户端.并不开源,而且售价有点高,要40刀.</p>
<p>我暂时用不到OneDrive,而且这个钱说实话是不想花的(主要还是实在太贵了.</p>
<p>于是我转头又找到了OverGrive,这是一个南非的网站(/组织?)搞的一个Google
Drive客户端,也不免费,但是只要5刀了,勉强可以接受.</p>
<p>于是我拿出了我办的浦发双币visa卡.这张卡我办完了以后当时拿来尝试绑Google
Play没绑上,所以就一直没用上.不过不用公本费,也没有年金,更没有额度,我只能用支付宝,或者其他银行卡往里面存钱,之后才能消费美元.</p>
<p>这下终于算是派上了用场.</p>
<hr />
<p>然后迎接我的就是付款失败.里面的钱明明够啊?为啥呢?</p>
<p>打客服电话问了一下,说是这个商户被判定为有可能是投资目标之类的东西,所以被限制交易了.啊这(</p>
<p>那没什么办法,我就淘宝上找了个paypal代付.</p>
<p>结果24h过去了,我仍然没有从我的邮降收到我的激活码邮件,我非常确定没有在垃圾桶里.</p>
<p>当然这个软件是有试用版的,有14天的试用期,可能是开发者认为只要14天以内发激活码就行了么???</p>
<p>不过,由于这个软件存在一些启动过程中的问题,所以我稍微研究了一下它,发现这是一个
python写的东西,于是我用<a
href="https://github.com/rocky/python-uncompyle6">uncompyle6</a>,给它反编译了一下,看到了源码.</p>
<p>不过反编译出来的源码并不能正常运行,存在一些问题,应该是反编译的时候控制流识别出错了.</p>
<p>但是我却因此能够看到它的激活流程:</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> on_activation_button(widget):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> licenseDisplay</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> splashProgressBar</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> splashWindow</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">&#39;ProgressBar&#39;</span> <span class="kw">in</span> <span class="bu">str</span>(splashGrid.get_child_at(<span class="dv">0</span>, <span class="dv">4</span>)):</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        Gtk.Container.remove(splashGrid, splashProgressBar)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        splashGrid.attach(splashEntry, <span class="dv">0</span>, <span class="dv">4</span>, <span class="dv">2</span>, <span class="dv">1</span>)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    splashEntry.set_tooltip_text(_(<span class="st">&#39;Copy and Paste your&#39;</span>) <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> appDisplayName <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> _(<span class="st">&#39;Activation code&#39;</span>))</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    splashEntry.set_placeholder_text(_(<span class="st">&#39;Enter Activation Code&#39;</span>))</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    splashLabel3.set_markup(<span class="st">&#39;&lt;a href=&quot;http://www.thefanclub.co.za/overgrive&quot; &gt;&#39;</span> <span class="op">+</span> _(<span class="st">&#39;Get Activation Code&#39;</span>) <span class="op">+</span> <span class="st">&#39;&lt;/a&gt;&#39;</span>)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    splashLabel3.<span class="ex">connect</span>(<span class="st">&#39;activate-link&#39;</span>, openInBrowserLisence, <span class="st">&#39;http://www.thefanclub.co.za/overgrive&#39;</span>)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    activationCode <span class="op">=</span> splashEntry.get_text()</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    activationCode <span class="op">=</span> activationCode.strip()</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> activationCode:</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        debugPrintAndLog(<span class="st">&#39;[SETUP] Activation Code : &#39;</span> <span class="op">+</span> activationCode)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> activateLicense(activationCode):</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>            licenseDisplay <span class="op">=</span> _(<span class="st">&#39;License Activated&#39;</span>)</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>            splashWindow.destroy()</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>            Gtk.main_quit()</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>            splashEntry.set_text(<span class="st">&#39;&#39;</span>)</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>            splashEntry.set_placeholder_text(_(<span class="st">&#39;Activation Code&#39;</span>) <span class="op">+</span> <span class="st">&#39; &#39;</span> <span class="op">+</span> _(<span class="st">&#39;Error&#39;</span>))</span></code></pre></div>
<p>这里调用了<code>activateLicense(activationCode)</code>来验证激活码;</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> activateLicense(entry):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> entry <span class="op">==</span> signature(email_address):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        get_activation <span class="op">=</span> getAppData(drive_service, <span class="st">&#39;Activated&#39;</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        debugPrintAndLog(<span class="st">&#39;[License] Activation : &#39;</span> <span class="op">+</span> <span class="bu">str</span>(get_activation))</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> get_activation <span class="op">==</span> <span class="st">&#39;Activated&#39;</span>:</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">True</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        debugPrintAndLog(<span class="st">&#39;[License] Activation Code Incorrect.&#39;</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span></span></code></pre></div>
<p>这里可以看到<code>entry == signature(email_address)</code>是重点;</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> signature(text):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    message <span class="op">=</span> <span class="bu">bytes</span>(text.encode(<span class="st">&#39;utf-8&#39;</span>))</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    tmp_sec <span class="op">=</span> text <span class="op">+</span> <span class="st">&#39;#overgrive&#39;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    secret <span class="op">=</span> <span class="bu">bytes</span>(tmp_sec.encode(<span class="st">&#39;utf-8&#39;</span>))</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    signatureEncode <span class="op">=</span> base64.b64encode(hmac.new(secret, message, digestmod<span class="op">=</span>(hashlib.sha512)).digest())</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> signatureEncode.decode(<span class="st">&#39;utf-8&#39;</span>)</span></code></pre></div>
<p>看到这里我震惊了,这个 Key 的验证居然是完全在本地完成的.
而且明明白白把生成验证码的方式都告诉我了,那我就不客气了.</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> base64, hmac, hashlib</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> signature(text):</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    message <span class="op">=</span> <span class="bu">bytes</span>(text.encode(<span class="st">&quot;utf-8&quot;</span>))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    tmp_sec <span class="op">=</span> text <span class="op">+</span> <span class="st">&quot;#overgrive&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    secret <span class="op">=</span> <span class="bu">bytes</span>(tmp_sec.encode(<span class="st">&quot;utf-8&quot;</span>))</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    signatureEncode <span class="op">=</span> base64.b64encode(</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        hmac.new(secret, message, digestmod<span class="op">=</span>(hashlib.sha512)).digest()</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> signatureEncode.decode(<span class="st">&quot;utf-8&quot;</span>)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>email <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;Your Google Drive Account Email: &quot;</span>)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;Your Activation Code: &quot;</span> <span class="op">+</span> signature(email))</span></code></pre></div>
<p>完事.</p>
]]></content:encoded></item><item><title>麻将图片生成器</title><link>https://blog.black-desk.cn/post/mahjim/</link><pubDate>Sun, 10 Jul 2022 02:23:58 +0800</pubDate><guid>https://blog.black-desk.cn/post/mahjim/</guid><description>这两天由于拿到了一个麻将图包,运用了一些编译原理课上学的知识,动手实现了一个简单的麻将图片生成器.
项目地址在这里,同时也在自己的服务器上部署了一个demo.
这里简单聊聊这个小工具.
名字 Mahjong,是麻将这个游戏的一种英文表示方法,由于雀魂叫majsoul,这里就只用到j为止,加上图片image的im,就成了mahjim, 这个命名可以说是很没有新意了.
思路 基础 首先要解决的就是如何用字符串表示麻将的问题.天凤有比较完整的记牌方式:
m=萬子, p=筒子, s=索子, z=字牌, 0=赤 一般形=４面子１雀頭 / 標準形=一般形＋七対形＋国士形 ツモはその時点で使用していない牌をランダムに選択します 有効牌をクリックすると打牌後にその牌をツモ牌として表示します (n*3+2)枚で開始：(n*3+2)枚目をツモ牌として表示 (n*3+1)枚で開始：ツモはページのロード時に毎回変化 和了役の判定はありません 暗槓はできません 但是这套规则只是天风用来计算牌效的小程序使用的,并不能用来表示由于吃碰杠出现的牌横置情况.
而且需要注意的是,天凤使用的这一套标记法,面对字牌并不那么方便,1~7z分别代表的是东南西北白发中,由于日麻和国内的三元牌顺序并不同,所以需要一定的适应.
以这个为基础,我们可以考虑在牌前面加上前缀来表示牌的情况,实际上对于输出图片这个需求而言,任何一张麻将一共就4种状态,正常竖置,横置,横置加杠,翻面.其中翻面我们可以考虑直接输出一张背面的图片,所以可以看作是一种特殊的牌.如果采用_来表示牌的横置,^表示牌加杠,那么就形成了我采取的这种方法来表示一张正常的牌:
pre+num+class 其中pre表示一个前缀,可以是_或者^,也可以没有,用来表示牌的摆放方式.num表示牌的点数,class用来表示牌的种类,可以是p,s,m,z.
但是每个牌都这么写就太烦了,我们需要一些简写的方式.
很容易想到的就是class可以合并,比如123s应该和1s2s3s是等价的,这样也不会有什么歧义.
字牌 可以看出,这个记牌方式对于字牌来说非常不友好,而且按照上面的想法进行了缩写之后,国标的春夏秋冬梅兰竹菊加进来以后,字牌的总数会超过10种.那么这样的缩写就会有问题了.
简单的解决方式就是直接用汉字来输入字牌,那么这样的话,类似中中中,白白白这种经常出现的组合又显得很不方便.所以我们也可以简单的想到一个这样的缩写:3中=中中中,仔细想想就会发现这个缩写和之前的数字牌表示方式是不冲突的.
风格 由于图包中的麻将区分国标和日麻,我们还需要一个额外的设置,来区分cn和jp,简单起见,我们就直接在整个字符串的开头放上一个cn|或者jp|来区分就可以了.
文法 我们做了这样的设计之后,基本整理一下就可以得出文法了:
input -&amp;gt; style + &amp;quot;|&amp;quot; + majs | majs // 旧 input -&amp;gt; majs style -&amp;gt; &amp;quot;cn&amp;quot; | &amp;quot;jp&amp;quot; 国标/日麻 // 旧 majs -&amp;gt; group + majs | empty 描述麻将牌的字符串 group -&amp;gt; ps + class | p + Z 按照牌的种类将牌分组, 比如 &amp;quot;123s456w3中&amp;quot; 有3个group, &amp;quot;123s&amp;quot; &amp;quot;456w&amp;quot; &amp;quot;3中&amp;quot; F -&amp;gt; &amp;quot;东&amp;quot; | &amp;quot;南&amp;quot; | &amp;quot;西&amp;quot; | &amp;quot;北&amp;quot; | &amp;quot;白&amp;quot; | &amp;quot;发&amp;quot; | &amp;quot;中&amp;quot; | &amp;quot;+&amp;quot; | .</description><content:encoded><![CDATA[<p>这两天由于拿到了一个麻将图包,运用了一些编译原理课上学的知识,动手实现了一个简单的麻将图片生成器.</p>
<p>项目地址在<a
href="https://github.com/black-desk/mahjim">这里</a>,同时也在自己的服务器上部署了一个<a
href="https://mahjim.black-desk.cn">demo</a>.</p>
<p>这里简单聊聊这个小工具.</p>
<h2 id="名字">名字</h2>
<p>Mahjong,是麻将这个游戏的一种英文表示方法,由于雀魂叫majsoul,这里就只用到j为止,加上图片image的im,就成了mahjim,
这个命名可以说是很没有新意了.</p>
<h2 id="思路">思路</h2>
<h3 id="基础">基础</h3>
<p>首先要解决的就是如何用字符串表示麻将的问题.天凤有比较完整的<a
href="https://tenhou.net/2/">记牌方式</a>:</p>
<blockquote>
<ul>
<li>m=萬子, p=筒子, s=索子, z=字牌, 0=赤</li>
<li>一般形=４面子１雀頭 / 標準形=一般形＋七対形＋国士形</li>
<li>ツモはその時点で使用していない牌をランダムに選択します</li>
<li>有効牌をクリックすると打牌後にその牌をツモ牌として表示します</li>
<li>(n*3+2)枚で開始：(n*3+2)枚目をツモ牌として表示</li>
<li>(n*3+1)枚で開始：ツモはページのロード時に毎回変化</li>
<li>和了役の判定はありません</li>
<li>暗槓はできません</li>
</ul>
</blockquote>
<p>但是这套规则只是天风用来计算牌效的小程序使用的,并不能用来表示由于吃碰杠出现的牌横置情况.</p>
<p>而且需要注意的是,天凤使用的这一套标记法,面对字牌并不那么方便,1~7z分别代表的是东南西北白发中,由于日麻和国内的三元牌顺序并不同,所以需要一定的适应.</p>
<p>以这个为基础,我们可以考虑在牌前面加上前缀来表示牌的情况,实际上对于输出图片这个需求而言,任何一张麻将一共就4种状态,正常竖置,横置,横置加杠,翻面.其中翻面我们可以考虑直接输出一张背面的图片,所以可以看作是一种特殊的牌.如果采用<code>_</code>来表示牌的横置,<code>^</code>表示牌加杠,那么就形成了我采取的这种方法来表示一张正常的牌:</p>
<pre><code>pre+num+class</code></pre>
<p>其中<code>pre</code>表示一个前缀,可以是<code>_</code>或者<code>^</code>,也可以没有,用来表示牌的摆放方式.<code>num</code>表示牌的点数,<code>class</code>用来表示牌的种类,可以是<code>p</code>,<code>s</code>,<code>m</code>,<code>z</code>.</p>
<p>但是每个牌都这么写就太烦了,我们需要一些简写的方式.</p>
<p>很容易想到的就是class可以合并,比如<code>123s</code>应该和<code>1s2s3s</code>是等价的,这样也不会有什么歧义.</p>
<h3 id="字牌">字牌</h3>
<p>可以看出,这个记牌方式对于字牌来说非常不友好,而且按照上面的想法进行了缩写之后,国标的春夏秋冬梅兰竹菊加进来以后,字牌的总数会超过10种.那么这样的缩写就会有问题了.</p>
<p>简单的解决方式就是直接用汉字来输入字牌,那么这样的话,类似中中中,白白白这种经常出现的组合又显得很不方便.所以我们也可以简单的想到一个这样的缩写:<code>3中=中中中</code>,仔细想想就会发现这个缩写和之前的数字牌表示方式是不冲突的.</p>
<h3 id="风格">风格</h3>
<p>由于图包中的麻将区分国标和日麻,我们还需要一个额外的设置,来区分cn和jp,简单起见,我们就直接在整个字符串的开头放上一个<code>cn|</code>或者<code>jp|</code>来区分就可以了.</p>
<h2 id="文法">文法</h2>
<p>我们做了这样的设计之后,基本整理一下就可以得出文法了:</p>
<pre><code>input   -&gt;  style + &quot;|&quot; + majs | majs // 旧 
input   -&gt;  majs
style   -&gt;  &quot;cn&quot; | &quot;jp&quot;               国标/日麻 // 旧
majs    -&gt;  group + majs | empty      描述麻将牌的字符串
group   -&gt;  ps + class | p + Z        按照牌的种类将牌分组, 比如 &quot;123s456w3中&quot; 有3个group, &quot;123s&quot; &quot;456w&quot; &quot;3中&quot;
F       -&gt;  &quot;东&quot; | &quot;南&quot; | &quot;西&quot; | &quot;北&quot; | &quot;白&quot; | &quot;发&quot; | &quot;中&quot; | &quot;+&quot; | ... | empty 所有字牌, 其中 + 代表牌背
ps      -&gt;  p + ps | empty            牌的列表
p       -&gt;  pre + num
pre     -&gt;  &quot;_&quot; | &quot;^&quot; | empty
num     -&gt;  &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot; | empty
class   -&gt;  &quot;p&quot; | &quot;s&quot; | &quot;w&quot; | &quot;z&quot;</code></pre>
<h2 id="实现">实现</h2>
<p>基本上得出了这样一个文法以后就可以直接去实现它了,我这里由于之前抄龙书附录A写过一个像是编译器前端的<a
href="https://github.com/black-desk/Compiler-front-end">东西</a>,所以这里用了类似的结构来实现.</p>
<p>实操的时候发现一些设计对于如此简单的字符串解析其实没有必要.我虽然做了一些调整,但是并没有把冗余的结构删干净,如果真有人阅读我的源码的话,见笑了.</p>
<p>实现之前我对这个项目有一些未来的的设想,即有空了再做的东西,比方说希望能用繁体中文输入字牌啊,之类的.所以实现上采取了一种听起来很蠢的方法.根据上面这个文法.我们实际上只要把简写全部展开,就可以让这个字符串描述一张一张的图片了.比方说<code>cn|_123s</code>
实际上可以看成,<code>cn_1s</code>,<code>cn2s</code>,<code>cn3s</code>这三张图片拼合的结果.所以我实际上只要把所有的简写都展开就可以得到,只指向某一张特定的图的字符串了.</p>
<p>得到了这个串以后,我们保持图片文件名和它一致.就基本可以解决问题了.比如说我横着的国标一条的文件名就叫<code>cn_1s.png</code>,那么实际上对于写程序来说会方便的多.</p>
<h2 id="图片拼接">图片拼接</h2>
<p>在实现过程中,本着能不自己造轮子就不自己造轮子的态度.我选择在拼接图片这一步上使用第三方库.</p>
<p>我首先找到了这么一个<a
href="https://github.com/ozankasikci/go-image-merge">库</a>,看起来很美好,但是作者写这个的时候,是机械的把图片往格子里面放,相当于一个表格,行的大小和列的大小都是固定的.由于横置的麻将牌和竖置的宽度不同,所以会引起一些问题.是不可用的.我简单看了看源码,并没有发现能满足我需求的设置.所以就放弃了它.</p>
<p>然后我又找到了<a
href="https://github.com/noelyahan/mergi">这个</a>,看起来功能强多了,甚至还可以生成动画,结果遇到了另一个问题.</p>
<p>如果用这个东西拼合高度不同的图片,那么它会统一向上对齐,而这是不可调的.
这也许在摆牌河的时候很有用,但是一般来说表示吃碰的时候都是向下的.</p>
<p>而且这个软件的运作方式也很迷惑,有兴趣的可以去看一下他的使用<a
href="https://github.com/noelyahan/mergi/blob/master/examples/merge/main.go#L69">示例</a>.</p>
<p>总之最终我没有找到合适的工具,只能自己实现了,这一步耽误了很多时间.
以后看来这种简单的需求还是自己造轮子比较好(</p>
<h2 id="透明">透明</h2>
<p>发现了一个新知识点:jpg是不支持透明图片的,想要就得用png.</p>
<h2 id="效果">效果</h2>
<p><code>56s|789s|3中|05m2|_123s2|4s</code></p>
<figure>
<img
src="https://mahjim.black-desk.cn/56s%7C789s%7C3中%7C05m2%7C_123s2%7C4s"
alt="56s|789s|3 中|05m2|_123s2|4s" />
<figcaption aria-hidden="true">56s|789s|3 中|05m2|_123s2|4s</figcaption>
</figure>
<p>一气通贯役牌中赤宝牌!</p>
<h2 id="特殊处理">特殊处理</h2>
<p>由于我们的语法并不是一个完全LL1的文法,比如说我们面对这样的两个输入:</p>
<p><code>123s</code> <code>3白</code></p>
<p>我们会发现我们读数字的时候并不知道这个数字到底是字牌的出现次数还是在描述点数</p>
<p>所以我这里有个特殊的处理:</p>
<p>如果我们只处理<code>123s</code>这种情况的话,读<code>123</code>的时候可以建立三张牌,它们的<code>class</code>暂时是空的.</p>
<p>当s读入的时候,我们向之前读入的<code>123</code>三张牌添加class.</p>
<p>如果模仿这个过程的话:读取数字,建立牌,然后我们读入一个<code>f</code>,把之前读入的<code>num</code>当作次数,从之前的牌中读出信息.</p>
<p>然后将牌的点数置成<code>1</code>,然后<code>class</code>置成读入的<code>f</code>,然后将这张牌复制<code>num</code>次.</p>
<p>这种设计,意味着我们读入<code>白</code>这样的字符串的时候仍然需要先读入<code>pre + num</code>,那么我们读一个<code>num</code>但是<code>lookat</code>并不是<code>num</code>的时候需要读出一个<code>1</code>.</p>
<p>这意味着如果我们只输入一个<code>s</code>会得到1s.</p>
<p>也带来了另一个问题:如果输入<code>_^2s</code>这样的字符串,会得到<code>_1s</code>和<code>^2s</code>,这太不符合直觉了.</p>
<p>所以要禁止一次输入两个<code>pre</code>.</p>
<p>这样的实现说实话是有点乱的.看来还是得支持括号.</p>
]]></content:encoded></item></channel></rss>